// we have to describe complex number and any basic operations via oop

#include<iostream>
#include<cmath>
#include<fstream>

struct complex { // base class
private:
	double x; // real part
	double y; // imaginary part

	double abs() const
	{
		return sqrt(x * x + y * y);
	};

	double arg() const // angle 
	{
		return atan2(x, y);
	};

	double positive_Im() const
	{
		return (y > 0 ? y : -y);
	};

	complex exponential_form(double r, double angle) // write exp_form via polar decomposition 
	{
		return complex(r * cos(angle), r * sin(angle));
	};

public:

	complex(int x = 0, int y = 0) : x(x), y(y) {} // constructor
	complex(const complex& Complex) : x(Complex.x), y(Complex.y) {} // copy constructor
	~complex() {} // destructor

	void print(double x, double y) // operator of printing everything
	{
		print_normal_form(x,  y);
		print_exponential_form(x, y);
	}
	
	void print_normal_form(double x, double y) // simply printing coordinates
	{
		std::cout << x << "+ i *" << y << std::endl;
	}

	void print_exponential_form(double x, double y) // write exp_form via the formula of polar decomposition 
	{
		exponential_form(x, y);
	}

	complex operator=(const complex& complex) // need only for division of complex by complex here
	{
		this->x = complex.x;
		this->y = complex.y;
		return *this;
	};
	
	complex operator+(double real_number) // add integer number to complex one 
	{
		return complex(x + real_number, y);
	};
	
	complex operator*(double real_number) // fix i*i = -1  // multiple integer number to complex one 
	{
		return complex(x * real_number, y * real_number);
	};
	
	complex operator/(double real_number) // check the formula // divide both parts of complex number to integer 
	{
		return complex(x / real_number, y / real_number);
	};
	
	complex operator-(double real_number)// subtract integer number from complex one  
	{
		return complex(x - real_number, y);
	};
	
	complex conj() // conjuction 
	{
		return complex(x, -y);
	};


	friend complex operator+(double real_number, complex c) // add complex number to integer one
	{
		return complex(c.x + real_number, c.y);
	};
	
	friend complex operator*(double real_number, complex c) // multiple complex number to integer one
	{
		return complex(c.x * real_number, c.y * real_number);
	};

	friend complex operator/(double real_number, complex c) // divide complex number to integer one
	{
		return complex(real_number / c.x, real_number / c.y);
	};

	friend complex operator-(double real_number, complex c) // subtract complex number to integer one
	{
		return complex(c.x - real_number, c.y);
	};


	complex operator+(complex c) // adding of 2 complex numbers
	{
		return complex(x + c.x, y + c.y);
	};
	complex operator*(complex c) // multipling of 2 complex numbers
	{
		return exponential_form(abs() * c.abs(), arg() + c.arg());

	};
	complex operator/(complex c) // dividing of 2 complex numbers
	{
		return *this * c.conj() / c.abs(); // division is to be done by conjugate number
	};
	complex operator-(complex c) // subtracting of 2 complex numbers 
	{
		return complex(x - c.x, y - c.y);
	};

	friend std::ostream& operator<<(std::ostream& stream, const complex c) // printing
	{
		stream << c.x << " + i *" << c.y; // normal output
		stream << c.abs() << " * e ^ (i * " << c.arg() << ")"; // exponent from 
		return stream;
	};

};


int main()
{

	return EXIT_SUCCESS;
}
