#include<iostream>
#include<string>
#include <map> // need for comparison & fighting of animals

using namespace std;

enum AnimalType {
	None, Dog, Cat, Bird, Fish
};

enum AnimalAbility {
	Walk = 1,
	Fly = 2,
	Swim = 4,
	Sound = 8
};

union AnimalInfo {
	AnimalType type;
	AnimalAbility ability;
};

struct Animal {
private:

	string name;
	AnimalType type;
	int abilities;
	int age;

public:
	Animal(string name, AnimalType type, int age, int abilities) :
		name(name), type(type), age(age) { abilities = Walk | Fly | Swim | Sound; } // constructor
	Animal(const Animal& animal) :
		name(animal.name), type(animal.type), age(animal.age), abilities(animal.abilities) {} // copy constructor
	~Animal() {} //destructor

	void print_info(AnimalType type, int abilities)
	{
		cout << type << " - type";
		cout << abilities << " - abilities of " << type;
	}

	int elder(int age)
	{
		age += 1;
	};

};
int main()
{
	int name_arr[100];
	int age_arr[100];
	int abilities_arr[100];
	int type_arr[100];
	int array_of_arrays[100];
	string type = "standart";
	for (int i = 0; i <= 100; i++) // initialization of animals
	{
		string name;
		int age;
		int abilities;
		cout << "name of " << i << "'s animal:";
		cin >> name;
		cout << endl << "age of " << name << "'s animal:";
		cin >> age;
		cout << endl << "abilities of " << name << "'s animal:";
		cin >> abilities;
		cout << "write type of " << name << "'s animal: None, Dog, Cat, Bird, Fish:" << endl;
		cin >> type;
		if (type != "None" && type != "Dog" && type != "Cat" && type != "Bird" && type != "Fish")
		{
			cout << "write type of " << name << "'s animal: None, Dog, Cat, Bird, Fish:" << endl; // implies,that from the 2nd chance input is correct
			cin >> type;
		};
		map<string, unsigned> array_of_arrays;
		array_of_arrays[name] = age + abilities;
		cout << name << endl;
	}
	/*
	while (sizeof(array) != 1) // fighting
	{
		int i = 0;
		int n = 100;
		while (i < n) 
		{
			if (array[i](age + abilities) > array[i + 1](age + abilities))
			{
				array[i + 1].delete;
				elder(age[i]);
			}
			else if (array[i](age + abilities) < array[i + 1](age + abilities))
			{
				array[i].delete;
				elder(age[i+1]);
			}

		}
		n = n / 2;
	}
	Animal.print_info(array[0].type, array[0].abilities)
	*/
	return EXIT_SUCCESS;
}



